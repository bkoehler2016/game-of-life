{"version":3,"sources":["hooks/useInterval.js","components/slider/Slider.js","components/cell/Cell.js","components/board/Board.js","builds/newBoardStatus.js","builds/findNumTrue.js","builds/runGame.js","App.js","serviceWorker.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Slider","speed","onSpeedChange","type","min","max","step","value","onChange","e","target","Cell","cell","click","i","j","className","status","onClick","BoardGrid","gameStatus","setGameStatus","size","handleClick","x","y","isGameRunning","generation","boardStatus","clonedBoard","JSON","parse","stringify","toggleBoardStatus","board","row","push","key","newBoardStatus","cellStatus","Math","random","aliveCount","grid","trueNeighbors","arr","find","val","length","neighbors","counter","forEach","n","runGame","clonedBoardStatus","changed","newbie","totalTrueN","nextStep","App","useState","Button","color","preventDefault","newSpeed","Board","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2050d4cf.chunk.js","sourcesContent":["import {useEffect, useRef} from 'react'\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    useEffect(()=>{\n        savedCallback.current = callback;\n    }, [callback])\n\n    useEffect(()=>{\n        function tick(){\n            savedCallback.current()\n        }\n        if(delay!==null){\n            let id = setInterval(tick, delay);\n            return ()=> clearInterval(id)\n        }\n    }, [delay])\n}\n\nexport default useInterval","import React from 'react'\n\nconst Slider = ({speed, onSpeedChange}) => {\n    const handleChange = e=> onSpeedChange(e.target.value)\n    return(\n      <input type='range' min='50' max='1000' step='50' value={speed} onChange={handleChange}/>\n    )\n  }\n\nexport default Slider","import React from 'react'\n\nconst Cell = ({cell, click, i , j}) => {\n  \n  \n    let stage = 'stageOne'\n    return (\n      <div className={`cell ${cell.status?stage:'dead'}`} onClick={()=>click(i, j)}/>\n    )\n    \n  \n  }\n\n  export default Cell","import React from 'react'\nimport Cell from '../cell/Cell'\n\nconst BoardGrid = ({gameStatus, setGameStatus, size}) => {\n    // const handleClick = (x, y) => onToggleCell(x,y)\n    function handleClick(x, y){\n        if (gameStatus.isGameRunning || gameStatus.generation > 0) {\n            return\n        }\n        const toggleBoardStatus = () => {\n          const clonedBoard = JSON.parse(JSON.stringify(gameStatus.boardStatus))\n          clonedBoard[x][y].status = !clonedBoard[x][y].status;\n          return clonedBoard\n        }\n        setGameStatus({...gameStatus, boardStatus: toggleBoardStatus()})\n      }\n    \n\n    const board = []\n    for (let i = 0; i < size; i++) {\n      let row = []\n      for (let j = 0; j< size; j++) {\n        row.push(\n          <Cell key={`c${i}${j}`} cell={gameStatus.boardStatus[i][j]} click={handleClick} i={i} j={j}/>\n        )\n      }\n      board.push(<div key={`r${i}`} className='row'>{row}</div>)\n    }\n    return <div className='board'>{board}</div>\n  };\n\nexport default BoardGrid","const size = 25\nconst newBoardStatus = (cellStatus = () => {\n  const cell = {\n    status: Math.random() < 0.2,\n    aliveCount: 0\n  }\n  if (cell.status){cell.aliveCount = 1}\n    return cell\n}) => {\n  const grid = []\n  for (let i = 0; i < size; i ++) {\n    grid[i] = []\n    for(let j = 0; j < size; j++) {\n      grid[i][j] = cellStatus()\n    }\n  }\n  return grid\n};\nexport default newBoardStatus","const trueNeighbors = (arr, x, y) => {\n    const find = (val) => {\n      if (val < 0) {\n        return (arr.length - 1)\n      }\n      else if (val > arr.length - 1){\n        return 0\n      }\n      else {\n        return val\n      }\n    }\n    const neighbors = [\n      arr[find((x-1))][find((y-1))],\n      arr[find((x-1))][y],\n      arr[find((x-1))][find((y+1))],\n      arr[find(x)][find((y-1))],\n      arr[find(x)][find((y+1))],\n      arr[find((x+1))][find((y-1))],\n      arr[find((x+1))][y],\n      arr[find((x+1))][find((y+1))]\n    ]\n    \n      let counter = 0\n      neighbors.forEach(n=>{\n        if (n.status) {\n          counter ++\n        }\n      })\n\n    return counter\n  }\n\nexport default trueNeighbors","import trueNeighbors from './findNumTrue'\nconst runGame = (gameStatus, setGameStatus, size) => {\n    const boardStatus = gameStatus.boardStatus\n    const clonedBoardStatus = JSON.parse(JSON.stringify(boardStatus))\n    let changed = false\n    const nextStep = () => {\n      for(let i = 0; i < size; i ++) {\n        for (let j = 0; j < size; j++) {\n          const totalTrueN = trueNeighbors(boardStatus, i, j)\n          if (boardStatus[i][j].status) {\n            if (totalTrueN < 2 || totalTrueN > 3) {\n              clonedBoardStatus[i][j] = {...clonedBoardStatus[i][j], status: false, aliveCount: 0};\n              changed = true\n            } else {\n              clonedBoardStatus[i][j] = {...clonedBoardStatus[i][j], aliveCount: clonedBoardStatus[i][j].aliveCount + 1};\n            }\n\n          } else {\n            if (totalTrueN === 3) {\n              clonedBoardStatus[i][j] = {...clonedBoardStatus[i][j], status: true, aliveCount: 1};\n              changed = true\n            }\n          }\n        }\n      }\n      return clonedBoardStatus\n    }\n    const newbie = nextStep()\n    if (changed === false){\n      setGameStatus({...gameStatus, isGameRunning: false})\n    } else {\n\n      setGameStatus({...gameStatus, boardStatus: newbie, \n      generation: gameStatus.generation + 1})\n    }\n    \n  }\n\n  export default runGame","import React, {useState} from 'react';\nimport './App.scss';\nimport useInterval from './hooks/useInterval'\nimport Slider from './components/slider/Slider'\nimport BoardGrid from './components/board/Board'\nimport newBoardStatus from './builds/newBoardStatus'\nimport runGame from './builds/runGame'\nimport {Button} from 'reactstrap'\n\n\nconst size = 25\n\nfunction App() {\n  const [gameStatus, setGameStatus] = useState({\n    boardStatus: newBoardStatus(),\n    generation: 0,\n    isGameRunning: false,\n    speed: 150\n  })\n  function clearBoard(e) {\n    e.preventDefault()\n    setGameStatus({...gameStatus, boardStatus: newBoardStatus(()=>{\n      const cell = {\n        status : false,\n        aliveCount: 0\n      }\n      return cell\n    }), isGameRunning: false, generation: 0})\n  }\n  function newGame(e){\n    e.preventDefault()\n    setGameStatus({...gameStatus, boardStatus: newBoardStatus(), isGameRunning: false, generation: 0})\n  }\n  function toggleRun(e){\n    e.preventDefault()\n    setGameStatus({...gameStatus, isGameRunning: !gameStatus.isGameRunning})\n  }\n  function changeSpeed(newSpeed) {\n    setGameStatus({...gameStatus, speed: newSpeed})\n  }\n  useInterval(()=>{\n    runGame(gameStatus, setGameStatus, size)\n  }, gameStatus.isGameRunning?gameStatus.speed:null)\n  \n  return (\n    <div className=\"App\">\n          <div className=\"buttons\">\n            <Button color=\"primary\" onClick={toggleRun}>{gameStatus.isGameRunning?'Pause':'Start'}</Button>\n            <Button color=\"danger\" onClick={clearBoard}>Clear</Button>\n            <Button color=\"warning\" onClick={newGame}>Start New</Button>\n          </div>\n          <div className=\"interval\">\n          <label>Interval Steps<Slider speed={gameStatus.speed} onSpeedChange={changeSpeed}/>{gameStatus.speed}ms\n          </label>\n          </div>\n          <div className=\"gen\">Generation: {gameStatus.generation}</div>\n        \n        <BoardGrid gameStatus={gameStatus} setGameStatus={setGameStatus} size={size}/>\n      <section className='rules'>\n        <h1><a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel=\"noopener noreferrer\">\nRules of the Game</a></h1>\n        <ul>\n          <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n          <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n          <li className='second'>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n          <li className='third'>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n        </ul>\n      </section>\n      \n      \n      \n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}